@page "/settings"
@attribute [Authorize]
@inject ISettingsService SettingsService
@inject NavigationManager NavigationManager
@inject IEmailService EmailService

<h3>Settings</h3>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger" role="alert">
        @errorMessage
    </div>
}

@if (!string.IsNullOrEmpty(successMessage))
{
    <div class="alert alert-success" role="alert">
        @successMessage
    </div>
}

<h4>System Credentials</h4>
<EditForm Model="@credentials" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="username">Username:</label>
        <InputText id="username" @bind-Value="credentials.Username" class="form-control" />
        <ValidationMessage For="@(() => credentials.Username)" />
    </div>

    <div class="form-group">
        <label for="email">Email:</label>
        <InputText id="email" @bind-Value="credentials.Email" class="form-control" />
        <ValidationMessage For="@(() => credentials.Email)" />
    </div>

    <div class="form-group">
        <label for="newPassword">New Password (leave blank to keep current):</label>
        <InputText id="newPassword" @bind-Value="credentials.Password" type="password" class="form-control" />
    </div>

    <div class="form-group">
        <label for="newAppPassword">New App Password (leave blank to keep current):</label>
        <InputText id="newAppPassword" @bind-Value="credentials.AppPassword" type="password" class="form-control" />
    </div>

    <button type="submit" class="btn btn-primary">Save Credentials</button>
</EditForm>

<h4 class="mt-4">Test Email</h4>
<EditForm Model="@testEmailModel" OnValidSubmit="SendTestEmail">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="testEmail">Test Email Address:</label>
        <InputText id="testEmail" @bind-Value="testEmailModel.Email" class="form-control" />
        <ValidationMessage For="@(() => testEmailModel.Email)" />
    </div>

    <div class="form-group">
        <label for="testSubject">Subject:</label>
        <InputText id="testSubject" @bind-Value="testEmailModel.Subject" class="form-control" />
        <ValidationMessage For="@(() => testEmailModel.Subject)" />
    </div>

    <div class="form-group">
        <label for="testBody">Body:</label>
        <InputTextArea id="testBody" @bind-Value="testEmailModel.Body" class="form-control" rows="5" />
        <ValidationMessage For="@(() => testEmailModel.Body)" />
    </div>

    <button type="submit" class="btn btn-primary">Send Test Email</button>
</EditForm>

@if (!string.IsNullOrEmpty(testEmailMessage))
{
    <div class="alert @(testEmailSuccess ? "alert-success" : "alert-danger") mt-3" role="alert">
        @testEmailMessage
    </div>
}

@code {
    private SystemCredentials credentials = new SystemCredentials();
    private string errorMessage;
    private string successMessage;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            credentials = await SettingsService.GetSystemCredentialsAsync();
            credentials.Password = string.Empty;
            credentials.AppPassword = string.Empty;
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading credentials: {ex.Message}";
        }
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            await SettingsService.SaveSystemCredentialsAsync(credentials);
            successMessage = "Credentials saved successfully!";
            errorMessage = null;
            credentials.Password = string.Empty;
            credentials.AppPassword = string.Empty;
        }
        catch (Exception ex)
        {
            errorMessage = $"Error saving credentials: {ex.Message}";
            successMessage = null;
        }
    }

    private TestEmailModel testEmailModel = new TestEmailModel();
    private string testEmailMessage;
    private bool testEmailSuccess;

    private async Task SendTestEmail()
    {
        try
        {
            await EmailService.SendEmailAsync(testEmailModel.Email, testEmailModel.Subject, testEmailModel.Body);
            testEmailMessage = "Test email sent successfully!";
            testEmailSuccess = true;
        }
        catch (Exception ex)
        {
            testEmailMessage = $"Error sending test email: {ex.Message}";
            testEmailSuccess = false;
        }
    }
}