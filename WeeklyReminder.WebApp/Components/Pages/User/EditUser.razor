@page "/user/edit/{Id:guid}"
@attribute [Authorize]
@inject IUserService UserService
@inject NavigationManager NavigationManager

<h3>Edit User</h3>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger" role="alert">
        @errorMessage
    </div>
}

@if (user == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <EditForm Model="@user" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <label for="username">Username:</label>
            <InputText id="username" @bind-Value="user.Username" class="form-control" />
            <ValidationMessage For="@(() => user.Username)" />
        </div>

        <div class="form-group">
            <label for="email">Email:</label>
            <InputText id="email" @bind-Value="user.Email" class="form-control" />
            <ValidationMessage For="@(() => user.Email)" />
        </div>

        <div class="mt-2">
            <button type="submit" class="btn btn-primary">Save</button>
            <a href="/user/list" class="btn btn-secondary">Cancel</a>
        </div>
    </EditForm>
}

@code {
    [Parameter]
    public Guid Id { get; set; }

    private UserEntity user;
    private string errorMessage;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            user = await UserService.GetUserByIdAsync(Id);
            if (user == null)
            {
                errorMessage = "User not found.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading user: {ex.Message}";
        }
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            await UserService.UpdateUserAsync(user);
            NavigationManager.NavigateTo("/user/list");
        }
        catch (InvalidOperationException ex)
        {
            errorMessage = ex.Message;
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred while updating the user: {ex.Message}";
        }
    }
}