@page "/schedule/edit/{Id:guid}"
@attribute [Authorize]
@inject IScheduleService ScheduleService
@inject IEmailTemplateService EmailTemplateService
@inject NavigationManager NavigationManager

<PageTitle>Edit Schedule - WeeklyReminder</PageTitle>

<h3>Edit Schedule</h3>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger" role="alert">
        @errorMessage
    </div>
}

@if (schedule == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <EditForm Model="@schedule" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <label for="userName">User:</label>
            <InputText id="userName" @bind-Value="schedule.User.Username" class="form-control" readonly />
        </div>

        <div class="form-group">
            <label for="excelFile">Upload New Excel File (optional):</label>
            <InputFile id="excelFile" OnChange="HandleFileUpload" class="form-control" />
        </div>

        <div class="mt-2">
            <button type="submit" class="btn btn-primary">Save</button>
            <a href="/schedule/list" class="btn btn-secondary">Cancel</a>
        </div>
    </EditForm>

    <h4 class="mt-4">Activities and Email Templates</h4>
    <table class="table">
        <thead>
            <tr>
                <th>Activity</th>
                <th>Number of Templates</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var activity in activities)
            {
                <tr>
                    <td>@activity.Name</td>
                    <td>@activity.EmailTemplates.Count</td>
                    <td>
                        <a href="/email-templates/@activity.Id" class="btn btn-secondary">Manage Email Templates</a>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    [Parameter]
    public Guid Id { get; set; }

    private ScheduleEntity schedule;
    private IEnumerable<ActivityEntity> activities = new List<ActivityEntity>();
    private string errorMessage;
    private IBrowserFile uploadedFile;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            schedule = await ScheduleService.GetScheduleByIdAsync(Id);
            activities = await ScheduleService.GetActivitiesByScheduleIdAsync(Id);
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading schedule: {ex.Message}";
        }
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            if (uploadedFile != null)
            {
                using var stream = uploadedFile.OpenReadStream();
                await ScheduleService.UpdateScheduleFromTimetableAsync(schedule.Id, stream);
            }
            else
            {
                await ScheduleService.UpdateScheduleAsync(schedule);
            }
            activities = await ScheduleService.GetActivitiesByScheduleIdAsync(Id);
            errorMessage = null;
        }
        catch (Exception ex)
        {
            errorMessage = $"Error updating schedule: {ex.Message}";
        }
    }

    private void HandleFileUpload(InputFileChangeEventArgs e)
    {
        uploadedFile = e.File;
    }
}