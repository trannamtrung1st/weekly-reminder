@page "/schedule/edit/{Id:guid}"
@attribute [Authorize]
@inject IScheduleService ScheduleService
@inject IUserService UserService
@inject NavigationManager NavigationManager

<PageTitle>Edit Schedule - WeeklyReminder</PageTitle>

<h3>Edit Schedule</h3>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger" role="alert">
    @errorMessage
</div>
}

@if (schedule == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <EditForm Model="@schedule" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <label for="userId">User:</label>
            <InputSelect id="userId" @bind-Value="schedule.UserId" class="form-control">
            <option value="">Select a user</option>
            @foreach (var user in users)
                {
                    <option value="@user.Id">@user.Username</option>
                }
            </InputSelect>
            <ValidationMessage For="@(() => schedule.UserId)" />
        </div>

        <div class="form-group">
            <label for="excelFile">Upload New Excel File (optional):</label>
            <InputFile id="excelFile" OnChange="HandleFileUpload" class="form-control" />
        </div>

        <div class="mt-2">
            <button type="submit" class="btn btn-primary">Save</button>
            <a href="/schedule/list" class="btn btn-secondary">Cancel</a>
        </div>
    </EditForm>
}

@code {
    [Parameter]
    public Guid Id { get; set; }

    private ScheduleEntity schedule;
    private List<UserEntity> users = new List<UserEntity>();
    private string errorMessage;
    private IBrowserFile uploadedFile;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            schedule = await ScheduleService.GetScheduleByIdAsync(Id);
            users = (await UserService.GetAllUsersAsync()).ToList();

            if (schedule == null)
            {
                errorMessage = "Schedule not found.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading schedule: {ex.Message}";
        }
    }

    private void HandleFileUpload(InputFileChangeEventArgs e)
    {
        uploadedFile = e.File;
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            if (uploadedFile != null)
            {
                using var stream = uploadedFile.OpenReadStream();
                await ScheduleService.CreateScheduleFromTimetableAsync(schedule.UserId, stream);
            }
            else if (Id == Guid.Empty) // This is a new schedule
            {
                errorMessage = "Please upload an Excel file to create a new schedule.";
                return;
            }
            // If no file is uploaded and this is an existing schedule, we don't need to do anything
            NavigationManager.NavigateTo("/schedule/list");
        }
        catch (Exception ex)
        {
            errorMessage = $"Error updating schedule: {ex.Message}";
        }
    }
}