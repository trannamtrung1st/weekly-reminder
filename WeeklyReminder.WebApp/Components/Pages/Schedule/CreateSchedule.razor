@page "/schedule/create"
@attribute [Authorize]
@inject IScheduleService ScheduleService
@inject IUserService UserService
@inject NavigationManager NavigationManager

<PageTitle>Create Schedule - WeeklyReminder</PageTitle>

<h3>Create Schedule</h3>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger" role="alert">
    @errorMessage
</div>
}

<EditForm Model="@schedule" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="userId">User:</label>
        <InputSelect id="userId" @bind-Value="schedule.UserId" class="form-control">
            <option value="">Select a user</option>
            @foreach (var user in users)
            {
                <option value="@user.Id">@user.Username</option>
            }
        </InputSelect>
        <ValidationMessage For="@(() => schedule.UserId)" />
    </div>

    <div class="form-group">
        <label for="excelFile">Upload Excel File:</label>
        <InputFile id="excelFile" OnChange="HandleFileUpload" class="form-control" />
    </div>

    <div class="mt-2">
        <button type="submit" class="btn btn-primary">Create</button>
        <a href="/schedule/list" class="btn btn-secondary">Cancel</a>
    </div>
</EditForm>

@code {
    private ScheduleEntity schedule = new ScheduleEntity();
    private List<UserEntity> users = new List<UserEntity>();
    private string errorMessage;
    private IBrowserFile uploadedFile;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            users = (await UserService.GetAllUsersAsync()).ToList();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading users: {ex.Message}";
        }
    }

    private void HandleFileUpload(InputFileChangeEventArgs e)
    {
        uploadedFile = e.File;
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            if (uploadedFile != null)
            {
                using var stream = uploadedFile.OpenReadStream();
                await ScheduleService.CreateScheduleFromTimetableAsync(schedule.UserId, stream);
            }
            else
            {
                await ScheduleService.CreateScheduleAsync(schedule);
            }
            NavigationManager.NavigateTo("/schedule/list");
        }
        catch (Exception ex)
        {
            errorMessage = $"Error creating schedule: {ex.Message}";
        }
    }
}